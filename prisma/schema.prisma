
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/trainable_chatbot/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Multi-tenant models matching existing database structure

model Tenant {
    id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    name              String   @db.VarChar(255)
    subdomain         String   @unique @db.VarChar(100)
    settings          Json?    @default("{}")
    subscriptionTier  String?  @default("basic") @map("subscription_tier") @db.VarChar(50)
    status            String   @default("active") @db.VarChar(20)
    createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt         DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relationships
    tenantUsers       TenantUser[]
    chatSessions      ChatSession[]
    knowledgeBase     KnowledgeBase[]

    @@map("tenants")
}

model TenantUser {
    id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    tenantId    String   @map("tenant_id") @db.Uuid
    userId      String   @map("user_id") @db.Uuid
    role        String   @default("user") @db.VarChar(50)
    permissions Json?    @default("{}")
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relationships
    tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@unique([tenantId, userId])
    @@map("tenant_users")
}

model ChatSession {
    id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    tenantId  String   @map("tenant_id") @db.Uuid
    userId    String   @map("user_id") @db.Uuid
    title     String?  @db.VarChar(255)
    messages  Json     @default("[]")
    metadata  Json?    @default("{}")
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relationships
    tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@map("chat_sessions")
}

model KnowledgeBase {
    id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
    tenantId    String?  @map("tenant_id") @db.Uuid
    parentId    String?  @map("parent_id") @db.Uuid
    type        String   @default("document") @db.VarChar(50)
    title       String   @db.VarChar(255)
    content     String
    metadata    Json?    @default("{}")
    embeddings  Unsupported("vector(1536)")?
    status      String   @default("active") @db.VarChar(20)
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
    updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

    // Relationships
    tenant      Tenant?           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    parent      KnowledgeBase?    @relation("KnowledgeBaseHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
    children    KnowledgeBase[]   @relation("KnowledgeBaseHierarchy")

    @@map("knowledge_base")
}
